# Makefile for MacOSX's 
#

# Description of different targets:
#
#	cpumain (default):	CPU/OpenMP version (track-parallel)
#	opencl:			OpenCL version (track-parallel)
#	cuda:			CUDA version (track or step parallel)

#
#  Adapted by John Apostolakis for MacOS Snow Leopard, Lion
#

# First versions: John Apostolakis, 10 July 2012
# Changelog
#   11 July 2012  - configuring for Apple OpenCL
# Last change:   11 July 2012  - configuring for Apple OpenCL

# --- Header and library directories


# Path to OpenCL Computing SDK directory
OCL_SDKROOT=/System/Library/Frameworks/OpenCL.framework/
# Path to OpenCL headers
OPENCLINC=$(OCL_SDKROOT)/Versions/Current/Headers
# All OpenCL code related header directories
OPENCLINCS=-I$(OPENCLINC) -I./OpenCL/common 

# The CUDA SDK root is, by default, in someone's home directory (e.g. $(HOME))
WHICHHOME=$(HOME)
# Path to CUDA Computing SDK directory
SDKROOT=$(WHICHHOME)/CUDA
# Path to CUDPP headers
CUDPPINC=-I$(SDKROOT)/C/common/inc/cudpp
# Path to CUDA libraries (e.g. /usr/local/cuda/lib)
CUDALIBDIR=/usr/local/cuda/lib
# Path to CUDPP libraries
CUDPPLIBDIR=$(SDKROOT)/C/common/lib/linux
# CUDPP library name (e.g. -lcudpp_i386)
CUDPPLIB=-lcudpp_i386

# --- Command-line overrideable configuration parameters

# Number of OpenMP threads in the CPU version
NTHREADS=12
# Number of steps to compute before compact (track-parallel gpu versions)
ITERATIONS_BEFORE_COMPACT=100
# Maximum depth of G4 navigation history
K_NAVIGATION_HISTORY_DEPTH=16
# Enable voxel navigation?
ENABLE_VOXEL_NAVIGATION=1
# Track or step parallel?
STEP_PARALLEL=0
# Physics example
PHYSICS=0
# Enable/disable debugging
DEBUGLEVEL=0

# --- Translating parameters to preprocessor directives...

# Common flags
COMMON_DEF=-DDOUBLE_PRECISION \
	-DNTHREADS=$(NTHREADS) \
	-DITERATIONS_BEFORE_COMPACT=$(ITERATIONS_BEFORE_COMPACT) \
	-DK_NAVIGATION_HISTORY_DEPTH=$(K_NAVIGATION_HISTORY_DEPTH) \
	-DVERBOSE \
	-Wall -Wextra

# Debug & profile flags
DEBUGFLAGS=

# CPU flags (fast C99 "device" code)
CPUD=-DCPU_CODE -DINLINE_EVERYTHING -Wno-unused-function

ifeq ($(ENABLE_VOXEL_NAVIGATION),1)
	COMMON_DEF:=$(COMMON_DEF) -DENABLE_VOXEL_NAVIGATION
endif

ifeq ($(PHYSICS),1)
	COMMON_DEF:=$(COMMON_DEF) -DPHYSICS
endif

ifeq ($(DEBUGLEVEL),1)
	DEBUGFLAGS:=$(DEBUGFLAGS) -g -pg
else
	CPUD:=$(CPUD) -DNDEBUG -O3
endif

ifneq ($(NTHREADS),1)
	CPUD:=$(CPUD) -DUSE_OPENMP -fopenmp
endif

COMMON_DEF:=$(COMMON_DEF) $(DEBUGFLAGS)

# CUDA flags
CUDAD=-DINLINE_EVERYTHING -DCUDA_CODE # Device code
CUDAL=-L$(CUDALIBDIR) -lcudart # Host code

ifeq ($(STEP_PARALLEL),1)
	CUDAD:=$(CUDAD) -DSTEP_PARALLEL $(CUDPPINC)
	CUDAL:=$(CUDAL) $(CUDPPLIB) -L$(CUDPPLIBDIR)
endif

# OpenCL flags (reduced number of different solids)
OPENCLD= -DINLINE_EVERYTHING -DONLY_BOX_AND_ORB #-DFAST_CL_MATH

HEADERS= \
 G4AffineTransform.h G4BuildVoxels.h G4RotationMatrix.h G4ThreeVector.h  \
 G4VSolid.h G4LogicalVolume.h G4Voxels.h G4VPhysicalVolume.h             \
 G4NavigationHistory.h G4Navigator.h G4Navigator2.h G4VoxelNavigation.h \
 G4Box.h G4Cons.h G4Orb.h G4Tubs.h \
 everything.h myutils.h utils.h stubMaterial.h stubParticle.h \
 geometry.hpp  geometry_common.hpp hostcommons.hpp
IMPEMENTATION= G4AffineTransform_inline.c G4RotationMatrix_inline.c G4ThreeVector_inline.c \
 G4LogicalVolume_inline.c G4VPhysicalVolume_inline.c G4VSolid_inline.c \
 G4NavigationHistory_inline.c

OPENCL_HEADERS=OpenCL/common/cl.hpp OpenCL/common/utils.h  ## nocl.h is for OpenMP ?
# OPENCL_HEADERS=

# --- Targets
default: openclmain

# OpenCL version
prog.cl: gpu.c $(HEADERS) $(IMPLEMENTATION) $(OPENCL_HEADERS)
	$(CC) -E -P gpu.c -o prog.cl $(COMMON_DEF) $(OPENCLD) -DOPENCL_CODE 
	echo "Created prog.cl ***************** "

# OpenCL main  -  Implementation files used only on GPU  (tbc)
openclmain: openclmain.cpp prog.cl $(HEADERS) 
	$(CXX) openclmain.cpp -o openclmain $(COMMON_DEF) $(OPENCLINCS) $(OPENCLD) -lOpenCL -DOPENCL_HOST

# CUDA version	
cuda:
	$(CC) -E -P cuda.cpp -o prog.cu $(COMMON_DEF) $(CUDAD)
	nvcc -c -arch=sm_20 -Xptxas -dlcm=ca prog.cu -DNDEBUG $(DEBUGFLAGS)
	g++ -o cudamain cudamain.cpp $(COMMON_DEF) prog.o $(CUDAL) -DCUDA_HOST

# CPU/OpenMP version
cpumain:
	$(CC) -c -o cpuexec.o cpuexec.c -std=c99 $(CPUD) $(COMMON_DEF)
	$(CXX) -o cpumain cpumain.cpp cpuexec.o $(COMMON_DEF) -fopenmp -DCPU_HOST

# Clean all
clean:
	rm -rf *.o cpumain openclmain cudamain prog.* prog2.* imggpu.txt imgcpu.txt imgcuda.txt *.log

